max_actarray_t* max_actarray_init(max_file_t* maxfile,int nb_actions);
max_actarray_t* max_mixed_actarray_init(max_file_t** maxfiles,int nb_actions);
void max_actarray_free(max_actarray_t* actarray);
void max_push_action(max_actarray_t* action_array,max_actions_t* actions);
void max_set_action(max_actarray_t* action_array,int idx,max_actions_t* actions);
max_actions_t* max_actions_init(max_file_t* max_file,const char* iface_name);
max_actions_t* max_actions_init_explicit(max_file_t* max_file);
void max_actions_free(max_actions_t* actions);
void max_disable_reset(max_actions_t* actions);
void max_disable_validation(max_actions_t* actions);
void max_enable_partial_memory(max_actions_t* actions);
int max_validate(max_actions_t* actions);
void max_set_param_uint64t(max_actions_t* actions,const char* const name,uint64_t value);
void max_set_param_double(max_actions_t* actions,const char* const name,double value);
void max_set_param_array_uint64t(max_actions_t* actions,const char* const name,uint64_t value,int idx);
void max_set_param_array_double(max_actions_t* actions,const char* const name,double value,int idx);
void max_ignore_kernel(max_actions_t* actions,const char* kernel_name);
void max_ignore_block(max_actions_t* actions,const char* block_name);
void max_set_ticks(max_actions_t* actions,const char* kernel_name,uint64_t nb_ticks);
void max_set_offset(max_actions_t* actions,const char* kernel_name,const char* offset_var_name,int v);
void max_ignore_offset(max_actions_t* actions,const char* kernel_name,const char* offset_var_name);
int max_get_stream_distance(max_actions_t* actions,const char* kernel_name,const char* offset_var_name);
int max_get_offset_auto_loop_size(max_actions_t* actions,const char* kernel_name,const char* offset_var_name);
void max_watch_range(max_actions_t* actions,const char* kernel_name,int start_tick,int num_ticks);
void max_route(max_actions_t* actions,const char* from_name,const char* to_name);
void max_route_string(max_actions_t* actions,const char* route_string);
void max_ignore_route(max_actions_t* actions,const char* block_name);
void max_set_debug(max_actions_t* actions,const char* name,max_debug_mode_t debug_mode);
void max_lmem_linear_advanced(max_actions_t* actions,const char* mem_stream_name,int64_t address,int64_t array_size,int64_t rw_size,int64_t offset);
void max_lmem_linear(max_actions_t* actions,const char* mem_stream_name,int64_t address,int64_t size);
void max_lmem_strided_advanced(max_actions_t* actions,const char* mem_stream_name,int64_t address,int64_t size_fast,int size_med,int size_slow,int64_t offset,int64_t stride,int stride_mode);
void max_lmem_strided(max_actions_t* actions,const char* mem_stream_name,int64_t address,int64_t size_fast,int size_slow,int stride_mode);
void max_lmem_blocked(max_actions_t* actions,const char* mem_stream_name,int64_t address,int64_t array_size_fast,int array_size_med,int array_size_slow,int64_t rw_size_fast,int rw_size_med,int rw_size_slow,int64_t offset_fast,int offset_med,int offset_slow);
int max_get_burst_size(max_file_t* const maxfile,const char* const name);
void max_lmem_set_interrupt_on(max_actions_t* actions,const char* mem_stream_name);
void max_lmem_all_interrupts_off(max_actions_t* actions);
int max_lmem_get_id(max_file_t* maxfile,const char* mem_stream_name);
int max_lmem_get_id_within_group(max_file_t* maxfile,const char* mem_stream_name);
void max_ignore_lmem(max_actions_t* actions,const char* mem_stream_name);
int max_get_offset(max_actions_t* actions,const char* kernel_name,const char* offset_var_name);
int max_get_offset_unchecked(max_actions_t* actions,const char* kernel_name,const char* offset_var_name);
int max_get_ignore_kernel(max_actions_t* actions,const char* kernel_name);
int max_get_ignore_offset(max_actions_t* actions,const char* kernel_name,const char* offset_var_name);
int max_system_get_compiler_version_year(void);
int max_system_get_compiler_version_major(void);
int max_system_get_compiler_version_minor(void);
char max_system_get_compiler_version_patch(void);
max_engine_t* max_load(max_file_t* max_file,const char* engine_id_pattern);
void max_unload(max_engine_t* engine);
void max_run(max_engine_t* engine,max_actions_t* actions);
max_run_t* max_run_nonblock(max_engine_t* engine,max_actions_t* actions);
max_run_t* max_run_nonblock_with_cb(max_engine_t* engine,max_actions_t* actions,void(*cb_func)(void*),void* cb_data);
void max_run_multi(max_engine_t* engine,max_actions_t** arr_actions,int nb_actions);
max_run_t* max_run_multi_nonblock(max_engine_t* engine,max_actions_t** arr_actions,int nb_actions);
void max_unlock(max_engine_t* engine);
void max_reset_engine(max_engine_t* engine);
void max_reload(max_engine_t* engine,max_file_t* maxfile);
void max_set_double(max_actions_t* actions,const char* block_name,const char* reg_name,double v);
void max_get_double(max_actions_t* actions,const char* block_name,const char* reg_name,double* v);
void max_set_uint64t(max_actions_t* actions,const char* block_name,const char* reg_name,uint64_t v);
void max_get_uint64t(max_actions_t* actions,const char* block_name,const char* reg_name,uint64_t* v);
void max_ignore_scalar(max_actions_t* actions,const char* block_name,const char* reg_name);
int max_has_handle_scalar_input(max_file_t* maxfile,const char* block_name,const char* reg_name);
int max_has_handle_scalar_output(max_file_t* maxfile,const char* block_name,const char* reg_name);
const max_handle_t* max_get_handle_scalar_input(max_file_t* maxfile,const char* block_name,const char* reg_name);
const max_handle_t* max_get_handle_scalar_output(max_file_t* maxfile,const char* block_name,const char* reg_name);
void max_set_handle_uint64t(max_actions_t* actions,const max_handle_t* handle,uint64_t value);
void max_set_handle_double(max_actions_t* actions,const max_handle_t* handle,double value);
void max_get_handle_uint64t(max_actions_t* actions,const max_handle_t* handle,uint64_t* value);
void max_get_handle_double(max_actions_t* actions,const max_handle_t* handle,double* value);
void max_tcp_setup_framing(max_tcp_socket_t* tcp_socket,max_tcp_sized_config_t config);
max_tcp_socket_t* max_tcp_create_socket(max_engine_t* engine,const char* stream_name);
max_tcp_socket_t* max_tcp_create_socket_with_number(max_engine_t* engine,const char* stream_name,uint16_t socket_number);
void max_tcp_setup_socket_advanced(max_tcp_socket_t* tcp_socket,uint32_t rx_window_size_bytes,uint32_t tx_window_size_bytes);
void max_tcp_connect(max_tcp_socket_t* tcp_socket,const struct in_addr* remote_ip,uint16_t remote_port);
void max_tcp_listen(max_tcp_socket_t* tcp_socket,uint16_t local_port);
uint16_t max_tcp_get_socket_number(max_tcp_socket_t* tcp_socket);
void max_tcp_select_transmit(uint16_t num_sockets,const max_tcp_socket_t* sockets[],uint16_t* num_sockets_with_tx_sent_event,max_tcp_socket_t* sockets_with_tx_sent_event[],struct timeval* timeout);
void max_tcp_select(uint16_t num_sockets,const max_tcp_socket_t* sockets[],uint16_t* num_changed_sockets,max_tcp_socket_t* changed_sockets[],struct timeval* timeout);
int max_tcp_await_state(max_tcp_socket_t* tcp_socket,max_tcp_connection_state_t state,struct timeval* timeout);
void max_tcp_close(max_tcp_socket_t* tcp_socket);
void max_tcp_close_advanced(max_tcp_socket_t* tcp_socket,max_tcp_close_mode_t close_mode);
max_net_connection_t max_tcp_get_network_connection(max_file_t* maxfile,const char* stream_name);
max_tcp_connection_state_t max_tcp_get_connection_state(max_tcp_socket_t* tcp_socket);
void max_tcp_enable_silly_window_avoidance(max_engine_t* engine,max_net_connection_t connection,int enable);
void max_tcp_enable_slow_start(max_engine_t* engine,max_net_connection_t connection,int enable);
void max_tcp_enable_fast_retransmit(max_engine_t* engine,max_net_connection_t connection,int enable);
void max_tcp_enable_fast_recovery(max_engine_t* engine,max_net_connection_t connection,int enable);
void max_tcp_silly_window_avoidance_is_enabled(max_engine_t* engine,max_net_connection_t connection,int* enabled);
void max_tcp_slow_start_is_enabled(max_engine_t* engine,max_net_connection_t connection,int* enabled);
void max_tcp_fast_retransmit_is_enabled(max_engine_t* engine,max_net_connection_t connection,int* enabled);
void max_tcp_fast_recovery_is_enabled(max_engine_t* engine,max_net_connection_t connection,int* enabled);
void max_tcp_set_delayed_ack_timeout(max_engine_t* engine,max_net_connection_t connection,bool enabled,uint32_t timeout_ms);
void max_tcp_get_delayed_ack_timeout(max_engine_t* engine,max_net_connection_t connection,bool* enabled,uint32_t* timeout_ms);
void max_tcp_set_keep_alive_timeout(max_engine_t* engine,max_net_connection_t connection,struct timeval timeout);
void max_tcp_get_keep_alive_timeout(max_engine_t* engine,max_net_connection_t connection,struct timeval* timeout);
void max_tcp_set_duplicate_ack_threshold(max_engine_t* engine,max_net_connection_t connection,uint16_t threshold);
void max_tcp_get_duplicate_ack_threshold(max_engine_t* engine,max_net_connection_t connection,uint16_t* threshold);
void max_tcp_configure_transmit_window_flush(max_engine_t* engine,max_net_connection_t connection,int enable_timeout_flush,int enable_fifo2klvl_flush,uint32_t flush_timeout_period);
void max_tcp_get_remote_address(max_tcp_socket_t* tcp_socket,struct in_addr* ip,uint16_t* port,struct ether_addr* mac);
void max_tcp_get_local_address(max_tcp_socket_t* tcp_socket,struct in_addr* ip,uint16_t* port,struct ether_addr* mac);
void max_tcp_get_num_bytes_received(max_tcp_socket_t* tcp_socket,uint64_t* num_rx_bytes);
void max_tcp_get_num_bytes_transmitted(max_tcp_socket_t* tcp_socket,uint64_t* num_tx_bytes,uint8_t* session_id);
void max_tcp_get_session_id(max_tcp_socket_t* tcp_socket,uint8_t* session_id);
void max_tcp_get_qdr_num_parity_errors(max_tcp_socket_t* tcp_socket,uint32_t* num_parity_errors);
typedef struct max_event_atomic{uint32_t event_id;}max_event_atomic_t;
typedef struct max_event_startstop{uint32_t event_id;}max_event_startstop_t;
typedef enum max_config_key_int64{MAX_CONFIG_PCIE_TIMEOUT,MAX_CONFIG_WFI_TIMEOUT,MAX_CONFIG_TOPOLOGY_TIMEOUT,MAX_CONFIG_DEBUG_MODE,MAX_CONFIG_SHUTDOWN_TIMEOUT,MAX_CONFIG_DFEPRINTF_TIMEOUT_CYCLES_SIMULATION,MAX_CONFIG_DFEPRINTF_TIMEOUT_CYCLES_DFE,MAX_CONFIG_NB_INTEGERS}max_config_key_int64_t;
typedef enum max_config_key_bool{MAX_CONFIG_VERBOSE,MAX_CONFIG_EVENTLOG_IGNORE_ERROR,MAX_CONFIG_EVENTLOG_ENABLE,MAX_CONFIG_EVENTLOG_DISABLE,MAX_CONFIG_PRINTF_TO_STDOUT,MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR,MAX_CONFIG_MAXFILE_INIT_ABORT_ON_ERROR,MAX_CONFIG_DISABLE_PCC,MAX_CONFIG_DFEPRINTF_ENABLE,MAX_CONFIG_DFEPRINTF_FORCE_ABRUPT_STOP,MAX_CONFIG_FIND_NEXT_DEBUG_DIR,MAX_CONFIG_NET_IP_ADDR_CONFLICT_DETECTION_ENABLE,MAX_CONFIG_NB_BOOLEANS}max_config_key_bool_t;
typedef enum max_config_key_string{MAX_CONFIG_DEFAULT_ENGINE_RESOURCE,MAX_CONFIG_USE_SIMULATION,MAX_CONFIG_DISABLE_MAXRING,MAX_CONFIG_DEFAULT_EVENTLOG_SERVER,MAX_CONFIG_DEFAULT_EVENTLOG_PROCESS_NAME,MAX_CONFIG_DEBUG_DIRECTORY,MAX_CONFIG_ACTIVITY_FILE,MAX_CONFIG_NB_STRINGS}max_config_key_string_t;
typedef enum max_debug_mode{MAX_DEBUG_NEVER = 0,MAX_DEBUG_ON_ERROR = 1,MAX_DEBUG_ALWAYS = 2}max_debug_mode_t;
struct max_errors;
typedef struct max_errors max_errors_t;
struct max_file_internal;
typedef struct max_file_internal max_file_internal_t;
struct max_actions_internal;
typedef struct max_actions_internal max_actions_internal_t;
struct max_engine_internal;
typedef struct max_engine_internal max_engine_internal_t;
struct max_engarray_internal;
typedef struct max_engarray_internal max_engarray_internal_t;
struct max_group_internal;
typedef struct max_group_internal max_group_internal_t;
struct max_actarray_internal;
typedef struct max_actarray_internal max_actarray_internal_t;
struct max_run_internal;
typedef struct max_run_internal max_run_internal_t;
struct max_handle;
typedef struct max_handle max_handle_t;
typedef struct max_udp_handle max_udp_handle_t;
typedef struct max_tcp_handle max_tcp_handle_t;
typedef struct max_udp_socket max_udp_socket_t;
typedef struct max_tcp_socket max_tcp_socket_t;
typedef struct max_llstream max_llstream_t;
typedef struct max_framed_stream max_framed_stream_t;
typedef struct max_tcp_socket_status max_tcp_socket_status_t;
struct max_stream_handle;
typedef struct max_actions{max_errors_t* errors;max_actions_internal_t* actions_internal;}max_actions_t;
typedef struct max_engine{max_errors_t* errors;char* id;max_engine_internal_t* engine_internal;}max_engine_t;
typedef struct max_engarray{max_errors_t* errors;char** ids;int size;max_engarray_internal_t* engarray_internal;}max_engarray_t;
typedef struct max_group{max_errors_t* errors;char* id;max_group_internal_t* group_internal;}max_group_t;
typedef struct max_actarray{max_errors_t* errors;int size;max_actarray_internal_t* actarray_internal;}max_actarray_t;
typedef struct max_file{max_errors_t* errors;max_file_internal_t* maxfile_internal;}max_file_t;
typedef struct max_run{max_errors_t* errors;max_run_internal_t* run_internal;}max_run_t;
typedef enum max_sharing_mode{MAXOS_EXCLUSIVE = 1,MAXOS_SHARED,MAXOS_SHARED_DYNAMIC,MAXOS_SHARING_PROPS_BAD = -1}max_sharing_mode_t;
typedef enum max_net_connection{MAX_NET_CONNECTION_CH2_SFP1 = 0,MAX_NET_CONNECTION_CH2_SFP2 = 1,MAX_NET_CONNECTION_QSFP_TOP_10G_PORT1,MAX_NET_CONNECTION_QSFP_TOP_10G_PORT2,MAX_NET_CONNECTION_QSFP_TOP_10G_PORT3,MAX_NET_CONNECTION_QSFP_TOP_10G_PORT4,MAX_NET_CONNECTION_QSFP_MID_10G_PORT1,MAX_NET_CONNECTION_QSFP_MID_10G_PORT2,MAX_NET_CONNECTION_QSFP_MID_10G_PORT3,MAX_NET_CONNECTION_QSFP_MID_10G_PORT4,MAX_NET_CONNECTION_QSFP_BOT_10G_PORT1,MAX_NET_CONNECTION_QSFP_BOT_10G_PORT2,MAX_NET_CONNECTION_QSFP_BOT_10G_PORT3,MAX_NET_CONNECTION_QSFP_BOT_10G_PORT4,MAX_NET_CONNECTION_QSFP_TOP_40G,MAX_NET_CONNECTION_QSFP_MID_40G,MAX_NET_CONNECTION_QSFP_BOT_40G,MAX_NET_CONNECTION_INVALID=9999}max_net_connection_t;
typedef enum max_net_manual_checksum_bad{MAX_NET_MANUAL_CHECKSUM_BAD_DISABLED = 0,MAX_NET_MANUAL_CHECKSUM_BAD_ALWAYS_0 = 1,MAX_NET_MANUAL_CHECKSUM_BAD_ALWAYS_1 = 2,MAX_NET_MANUAL_CHECKSUM_BAD_LAST_DATA_BIT = 3}max_net_manual_checksum_bad_t;
typedef enum max_tcp_connection_state{MAX_TCP_STATE_CLOSED = 0,MAX_TCP_STATE_LISTEN = 1,MAX_TCP_STATE_ESTABLISHED = 4,MAX_TCP_STATE_CLOSE_WAIT = 5,MAX_TCP_STATE_CLOSED_DATA_PENDING = 13}max_tcp_connection_state_t;
typedef enum max_tcp_close_mode{MAX_TCP_CLOSE_GRACEFUL,MAX_TCP_CLOSE_ABORT_RESET,MAX_TCP_CLOSE_ABORT_NO_RESET}max_tcp_close_mode_t;
typedef enum max_tcp_sized_config{MAX_TCP_FIX_4_2 = 0x5203180,MAX_TCP_SOUPBINTCP = 0x0800800,MAX_TCP_ETI = 0x0000800,MAX_TCP_STATIC_DECODER_ENABLE = 0x0000000}max_tcp_sized_config_t;
typedef enum{MAX_ARP_ENTRY_STATIC,MAX_ARP_ENTRY_COMPLETE,MAX_ARP_ENTRY_INCOMPLETE}max_arp_table_entry_type_t;
typedef struct{struct in_addr ip;struct ether_addr mac;max_arp_table_entry_type_t entry_type;}max_arp_table_entry_t;
typedef struct{struct in_addr destination;struct in_addr netmask;struct in_addr gateway;}max_ip_routing_table_entry_t;
max_group_t* max_load_group(max_file_t* max_file,max_sharing_mode_t sharing_mode,const char* group_id,int group_size);
max_engine_t* max_lock_any(max_group_t* group);
void max_unload_group(max_group_t* group);
void max_run_group(max_group_t* group,max_actions_t* actions);
max_run_t* max_run_group_nonblock(max_group_t* group,max_actions_t* actions);
void max_run_group_multi(max_group_t* group,max_actions_t** arr_actions,int nb_actions);
void max_queue_input(max_actions_t* actions,const char* stream_name,const void* data,size_t bytes);
void max_queue_output(max_actions_t* actions,const char* stream_name,void* data,size_t bytes);
void max_queue_output_discard(max_actions_t* actions,const char* stream_name,size_t bytes);
void max_clear_queues(max_actions_t* actions);
void max_ignore_stream(max_actions_t* actions,const char* stream_name);
void max_disable_stream_sync(max_actions_t* actions,const char* stream_name);
void max_sync_stream(max_actions_t* actions,const char* stream_name);
int max_has_handle_stream(max_file_t* maxfile,const char* name);
const max_handle_t* max_get_handle_stream(max_file_t* maxfile,const char* name);
void max_queue_input_handle(max_actions_t* actions,const max_handle_t* handle,const void* data,size_t bytes);
void max_queue_output_handle(max_actions_t* actions,const max_handle_t* handle,void* data,size_t bytes);
void max_register_buffer(void* addr,size_t size);
void max_deregister_buffer(void* addr);
void max_eth_get_default_mac_address(max_engine_t* engine,max_net_connection_t connection,struct ether_addr* mac);
void max_net_set_manual_checksum_bad(max_engine_t* engine,max_net_connection_t connection,max_net_manual_checksum_bad_t mode);
int max_arp_get_entry(max_engine_t* engine,max_net_connection_t connection,const struct in_addr* ip,struct ether_addr* mac);
int max_arp_lookup_entry(max_engine_t* engine,max_net_connection_t connection,const struct in_addr* ip,struct ether_addr* mac);
void max_arp_remove_entry(max_engine_t* engine,max_net_connection_t connection,const struct in_addr* ip);
void max_arp_add_entry(max_engine_t* engine,max_net_connection_t connection,const struct in_addr* ip,const struct ether_addr* mac);
void max_arp_get_table_dump(max_engine_t* engine,max_net_connection_t connection,max_arp_table_entry_t** table,int32_t* num_table_entries);
void max_arp_free_table_dump(max_engine_t* engine,max_arp_table_entry_t* table);
void max_ip_config(max_engine_t* engine,max_net_connection_t connection,const struct in_addr* ip,const struct in_addr* netmask);
void max_ip_multicast_join_group(max_engine_t* engine,max_net_connection_t connection,const struct in_addr* multicast_ip);
void max_ip_multicast_leave_group(max_engine_t* engine,max_net_connection_t connection,const struct in_addr* multicast_ip);
void max_ip_multicast_get_group_dump(max_engine_t* engine,max_net_connection_t connection,struct in_addr** multicast_groups,int32_t* num_multicast_groups);
void max_ip_multicast_free_group_dump(max_engine_t* engine,struct in_addr* multicast_groups);
void max_ip_route_set_default_gw(max_engine_t* engine,max_net_connection_t connection,const struct in_addr* gateway);
void max_ip_route_add(max_engine_t* engine,max_net_connection_t connection,const struct in_addr* destination,const struct in_addr* netmask,const struct in_addr* gateway);
void max_ip_route_remove(max_engine_t* engine,max_net_connection_t connection,const struct in_addr* destination,const struct in_addr* netmask);
int max_ip_route_get(max_engine_t* engine,max_net_connection_t connection,const struct in_addr* destination,const struct in_addr* netmask,struct in_addr* gateway);
void max_ip_route_get_table_dump(max_engine_t* engine,max_net_connection_t connection,max_ip_routing_table_entry_t** table,int32_t* num_table_entries);
void max_ip_route_free_table_dump(max_engine_t* engine,max_ip_routing_table_entry_t* table);
void max_ip_route_get_next_hop(max_engine_t* engine,max_net_connection_t connection,const struct in_addr* destination,struct in_addr* next_hop);
int max_is_timesource_ready(max_engine_t* engine);
void max_set_timesource_threshold(max_engine_t* engine,uint32_t nsecs);
int max_icmp_echo_request(max_engine_t* engine,max_net_connection_t connection,const struct in_addr* ip,size_t payload_size,uint8_t ttl,uint32_t timeout,uint32_t* roundtrip,uint8_t* reply_ttl);
int max_icmp_echo_request_advanced(max_engine_t* engine,max_net_connection_t connection,const struct in_addr* ip,size_t payload_size,uint8_t ttl,uint16_t id,uint16_t seq,uint32_t timeout,uint32_t* roundtrip,uint8_t* reply_ttl);
void max_icmp_echo_enable_server(max_engine_t* engine,max_net_connection_t connection,int enable);
int max_icmp_echo_server_is_enabled(max_engine_t* engine,max_net_connection_t connection);
max_udp_socket_t* max_udp_create_socket(max_engine_t* engine,const char* stream_name);
max_udp_socket_t* max_udp_create_socket_with_number(max_engine_t* engine,const char* stream_name,uint16_t socket_number);
void max_udp_bind(max_udp_socket_t* udp_socket,uint16_t local_port);
void max_udp_bind_ip(max_udp_socket_t* udp_socket,const struct in_addr* local_ip,uint16_t local_port);
void max_udp_connect(max_udp_socket_t* udp_socket,const struct in_addr* remote_ip,uint16_t remote_port);
void max_udp_set_ttl(max_udp_socket_t* udp_socket,uint8_t ttl);
uint16_t max_udp_get_socket_number(max_udp_socket_t* udp_socket);
max_net_connection_t max_udp_get_network_connection(max_file_t* maxfile,const char* stream_name);
void max_udp_close(max_udp_socket_t* udp_socket);
max_framed_stream_t* max_framed_stream_setup(max_engine_t* engine,const char* name,void* buffer,size_t buffer_size,size_t max_frame_size);
void max_framed_stream_release(max_framed_stream_t* framed_stream);
size_t max_framed_stream_read(max_framed_stream_t* framed_stream,size_t num_frames,void** frames,size_t* frame_sizes);
void max_framed_stream_discard(max_framed_stream_t* framed_stream,size_t num_frames);
size_t max_framed_stream_write_acquire(max_framed_stream_t* framed_stream,size_t numFrames,void** frames);
void max_framed_stream_write(max_framed_stream_t* framed_stream,size_t numFrames,size_t* sizes);
int max_ping_daemon(max_file_t* maxfile,const char* socket_name);
size_t max_count_engines_present(max_file_t* maxfile,const char* engine_id_pattern);
size_t max_count_engines_free(max_file_t* maxfile,const char* engine_id_pattern);
typedef enum slic_errno{EMAX_NULL_MAXFILE = 89,EMAX_UNINITIALISED_CONSTANTS = 90,EMAX_NONEXISTENT_CONSTANT = 91,EMAX_NULL_BOARD = 92,EMAX_APP_ID_READ_FAILURE = 93,EMAX_REV_ID_READ_FAILURE = 94,EMAX_WRONG_BITSTREAM = 96,EMAX_CHECKSUM_READ_FAILURE = 97,EMAX_CLOSE_DEVICE = 98,EMAX_OPEN_DEVICE = 99,EMAX_INIT_IFPGA_LINK = 100,EMAX_CONNECT_TO_DAEMON = 101,EMAX_UNINITIALISED_REGS = 102,EMAX_MISSING_CHECKSUM = 103,EMAX_ID_READ_FAILURE = 104,EMAX_WRONG_CARD_ID = 105,EMAX_SETUP_SYSMON = 106,EMAX_DAEMON_DISCONNECT = 107,EMAX_RUNTIME_PARAMS_UNUPLOADED = 108,EMAX_DEVICE_RESET = 109,EMAX_WAIT_FOR_INTERRUPT = 110,EMAX_SETTING_LEDS = 111,EMAX_UNINITIALISED_MEMS = 112,EMAX_NONEXISTENT_MEMORY = 113,EMAX_MEMORY_WRITE = 114,EMAX_REG_CACHE_OOM = 115,EMAX_REGISTER_WRITE = 116,EMAX_NONEXISTENT_REGISTER = 117,EMAX_INVALID_SIZE_REG = 118,EMAX_REG_VALUE_TOO_BIG = 119,EMAX_REGISTER_READ = 120,EMAX_REG_READ_INVALID_CHIP = 121,EMAX_UNINITIALISED_MEMCTRL = 122,EMAX_NONEXISTENT_MEMCTRL_STREAM = 123,EMAX_INVALID_EXCEPTION_MASK = 124,EMAX_NONEXISTENT_EXCEPTION = 125,EMAX_CLOSE_PCIE_STREAM = 126,EMAX_NONEXISTENT_PCIE_STREAM = 127,EMAX_INIT_PCIE_STREAM = 128,EMAX_OPEN_PCIE_STREAM = 129,EMAX_QUEUE_PCIE_IO_REQUEST = 130,EMAX_SYNC_PCIE_STREAM = 131,EMAX_NONEXISTENT_PARAM = 132,EMAX_TEMPERATURE_READ_FAILURE = 133,EMAX_TEMPERATURE_TOO_HIGH = 134,EMAX_CONVERT_UNSUPPORTED_TYPE = 135,EMAX_MISSING_REQUIRED_CONSTANT = 136,EMAX_DESTROY_REGISTER_CACHE = 137,EMAX_DESTROY_PCIE_STREAMS = 138,EMAX_DESTROY_RUNTIME_PARAMS = 139,EMAX_REGISTER_CACHE_WRITE = 140,EMAX_CONVERT_REGISTER_TYPE = 141,EMAX_DUMP_REGISTER_VALUES_READ = 142,EMAX_EXCEPTIONS_REGISTER_ADDR = 143,EMAX_UNINITIALISED_CAPABILITIES = 154,EMAX_NONEXISTENT_CAPABILITY = 155,EMAX_MISSING_ADDRESS_PATTERN = 156,EMAX_MISSING_MEMCTRL = 157,EMAX_MISSING_START_ADDRESS = 158,EMAX_NONEXISTENT_MEMCTRL_GROUP = 159,EMAX_WRONG_ADDRESS_PATTERN = 160,EMAX_INVALID_SPACE_SIZE = 161,EMAX_INVALID_BLOCK_SIZE = 162,EMAX_INVALID_START_POINT = 163,EMAX_NOT_DUAL_MODE = 164,EMAX_GET_CHIP_ID = 166,EMAX_MAXELEROS_VERSION = 167,EMAX_WRONG_MEMORY_TYPE = 168,EMAX_DEPRECATED = 169,EMAX_UNINITIALISED_KERNELS = 170,EMAX_NONEXISTANT_KERNEL = 171,EMAX_INIT_MEMCTRL = 172,EMAX_DEVCNT_FAIL = 173,EMAX_DEVLST_FAIL = 174,EMAX_INVALID_DEVICE = 175,EMAX_NOT_PAIRED = 176,EMAX_DAEMON_COMM = 177,EMAX_NONEXISTENT_BITFIELD = 203,EMAX_INVALID_SIZE_BITFIELD = 215,EMAX_BOUND_ERROR = 237,EMAX_FREQUENCY_RESCALE_FAIL = 258,EMAX_CHAIN_LENGTH_INVALID = 260,EMAX_MEMORY_READ = 261,EMAX_MEC_NOT_SUPPORTED = 273,EMAX_TIMING_SCORE_TOO_LARGE = 279,EMAX_ALIGNMENT_ERROR = 280,EMAX_FRAME_ERROR = 281,EMAX_MEC_CONTROL_STREAM_ERROR = 298,EMAX_SETUP_PCIE_STREAM_RINGBUFFER = 299,EMAX_RELEASE_PCIE_STREAM_RINGBUFFER = 300,EMAX_NETWORK_MAC_READ_FAILED = 304,EMAX_NETWORK_MAC_WRITE_FAILED = 305,EMAX_NETWORK_STAT_READ_FAILED = 306,EMAX_ARP_OPEN_FAILED = 309,EMAX_ARP_CLOSE_FAILED = 310,EMAX_ARP_QUERY_FAILED = 311,EMAX_PADDER_FAILED = 312,EMAX_PADDER_TIMEOUT = 313,EMAX_TOPOLOGY_CHECK_FAILED = 315,EMAX_WRONG_REGISTER_TYPE = 316,EMAX_SET_PCIE_STREAM_TIMEOUT = 426,EMAX_SET_DMA_BUFFERING_FAILED = 439,EMAX_STOP_PCIE_STREAM = 442,EMAX_CONFIGURE_KERNEL_PROFILER = 444,EMAX_READ_KERNEL_PROFILER = 445,EMAX_TCP_SETUP_FAILED = 446,EMAX_SET_INTERRUPT_TIMEOUT = 453,EMAX_SET_SHUTDOWN_ON_EXIT = 456,EMAX_CONFIGURE_HARDWARE_WATCH = 489,EMAX_RELEASE_QUANTUM = 490,EMAX_RELEASE_POOL = 491,EMAX_UNSUPPORTED_MAXFILE = 492,EMAX_POOL_ALLOC = 493,EMAX_CREATE_POOL = 495,EMAX_ALLOCATE_QUANTA = 496,EMAX_INVALID_FLAGS = 501,EMAX_TOPOLOGY_REQUEST_FAILED = 506,EMAX_CONFIG = 507,EMAX_KERNEL_PROFILER_CONFIGURATION_FAILED = 508,EMAX_KERNEL_PROFILER_READ_FAILED = 509,EMAX_ALLOCATE_TOKEN = 510,EMAX_MAXFILE_SETUP = 512,EMAX_SESSION_INIT = 513,EMAX_KERNEL_SETUP = 514,EMAX_MAPPED_ELEMENT = 515,EMAX_INVALID_OBJECT = 516,EMAX_MODE_SETUP = 517,EMAX_REPORTED_ERROR = 518,EMAX_ACTION_COMMIT_FAILED = 523,EMAX_RAW_SESSION_ACTION_FAILED = 524,EMAX_ACTION_VALIDATION_FAILED = 525,EMAX_MEM_ALLOC_FAILED = 526,EMAX_INTERNAL_ERROR = 528,EMAX_EXECUTE_ERROR = 529,EMAX_UNSUPPORTED = 530,EMAX_NOT_BURST_ALIGNED = 531,EMAX_INVALID_STRIDE = 532,EMAX_INVALID_RW_MODE = 533,EMAX_INVALID_INDEX = 534,EMAX_ROUTING_FAILED = 536,EMAX_CONFIG_UDP_ARP_FAILED = 537,EMAX_INVALID_ARG = 538,EMAX_THREAD_FAIL_INIT = 539,EMAX_THREAD_FAIL_CREATE = 540,EMAX_THREAD_FAIL_JOIN = 541,EMAX_THREAD_FAIL_LOCK = 542,EMAX_THREAD_FAIL_WAIT = 543,EMAX_FORMAT_ADDRESS_FAIL = 544,EMAX_ARP_UPDATE_FAILED = 545,EMAX_LLSTREAM_MARKER_UPDATE_FAILED = 546,EMAX_LLSTREAM_READ_FAILED = 550,EMAX_LLSTREAM_WRITE_FAILED = 551,EMAX_NETWORK_SETUP_FAILED = 553,EMAX_UDP_SETUP_FAILED = 554,EMAX_THREAD_FAIL_SIGNAL = 555,EMAX_FRAME_STREAM_INIT_FAIL = 562,EMAX_FRAME_STREAM_DISCARD_FAIL = 563,EMAX_FRAME_STREAM_READ_FAIL = 564,EMAX_IGMP_SETUP_FAILED = 567,EMAX_ARP_SETUP_FAILED = 568,EMAX_TIMESTAMP_FAILED = 569,EMAX_NONEXISTENT_BLOCK = 571,EMAX_IP_ROUTING_SETUP_FAILED = 573,EMAX_HANDLE_MISMATCH = 579,EMAX_FRAME_STREAM_WRITE_FAIL = 606,EMAX_ICMP_ERROR = 609,EMAX_ICMP_SETUP_FAILED = 610,EMAX_THREAD_FAIL_CANCEL = 605,EMAX_HWPRINTF_ERROR = 611,EMAX_LICENSING_ERROR = 614,EMAX_REGISTRATION_ERROR = 616,EMAX_MAXDEBUG_ERROR = 618,EMAX_TOPOLOGY_REQUEST_TIMEOUT = 620,}slic_errno_t;
void max_file_free(max_file_t* max_file);
const char* max_get_handle_name(const max_handle_t* handle);
uint64_t max_get_constant_uint64t(max_file_t* maxfile,const char* name);
double max_get_constant_double(max_file_t* maxfile,const char* name);
const char* max_get_constant_string(max_file_t* maxfile,const char* name);
time_t max_load_timeout(max_file_t* maxfile,const time_t timeout);
void max_set_max_runnable_timing_score(max_file_t* maxfile,int score);
void max_config_set_int64(max_config_key_int64_t key,int64_t value);
int64_t max_config_get_int64(max_config_key_int64_t key);
void max_config_set_string(max_config_key_string_t key,const char* value);
const char* max_config_get_string(max_config_key_string_t key);
void max_config_set_bool(max_config_key_bool_t key,int value);
int max_config_get_bool(max_config_key_bool_t key);
max_engarray_t* max_load_array(max_file_t* maxfile,int number_of_engines,const char* engine_id_pattern);
max_engarray_t* max_load_mixed_array(max_file_t** maxfiles,int number_of_engines,const char* engine_id_pattern);
void max_unload_array(max_engarray_t* engarray);
void max_run_array(max_engarray_t* engarray,max_actarray_t* actarray);
max_run_t* max_run_array_nonblock(max_engarray_t* engarray,max_actarray_t* actarray);
void max_run_array_multi(max_engarray_t* engarray,max_actarray_t** arr_actarray,int nb_actarray);
max_run_t* max_run_array_multi_nonblock(max_engarray_t* engarray,max_actarray_t** arr_actarray,int nb_actarray);
void max_set_mem_uint64t(max_actions_t* actions,const char* block_name,const char* mem_name,size_t index,uint64_t v);
void max_set_mem_range_uint64t(max_actions_t* actions,const char* block_name,const char* mem_name,size_t index_start,size_t nb_elements,const uint64_t* values);
void max_set_mem_double(max_actions_t* actions,const char* block_name,const char* mem_name,size_t index,double v);
void max_set_mem_range_double(max_actions_t* actions,const char* block_name,const char* mem_name,size_t index_start,size_t nb_elements,const double* values);
void max_get_mem_uint64t(max_actions_t* actions,const char* block_name,const char* mem_name,size_t index,uint64_t* v);
void max_get_mem_range_uint64t(max_actions_t* actions,const char* block_name,const char* mem_name,size_t index_start,size_t nb_elements,uint64_t* values);
void max_get_mem_double(max_actions_t* actions,const char* block_name,const char* mem_name,size_t index,double* v);
void max_get_mem_range_double(max_actions_t* actions,const char* block_name,const char* mem_name,size_t index_start,size_t nb_elements,double* values);
void max_ignore_mem(max_actions_t* actions,const char* block_name,const char* mem_name);
void max_ignore_mem_input(max_actions_t* actions,const char* block_name,const char* mem_name);
void max_ignore_mem_output(max_actions_t* actions,const char* block_name,const char* mem_name);
max_file_t* INIT_NAME(void);
int max_ok(max_errors_t* errors);
int max_errors_check(max_errors_t* errors,int error_code);
char* max_errors_trace(max_errors_t* errors);
void max_errors_clear(max_errors_t* errors);
void max_errors_mode(max_errors_t* errors,int abort_on_error);
void max_report_error_slic(max_errors_t* errors,const char* filename,const int linenum,const int errorcode,const char* message);
void max_wait(max_run_t* run);
void max_nowait(max_run_t* run);
void max_mark_iteration(void);
void max_eventlog_enable(const char* log_server,const char* name,...);
void max_eventlog_set_thread_name(const char* name,...);
max_event_atomic_t max_event_make_atomic(const char* name,...);
void max_event_fire(max_event_atomic_t event);
max_event_startstop_t max_event_make_startstop(const char* name,...);
void max_event_start(max_event_startstop_t event);
void max_event_stop(max_event_startstop_t event);
void max_eventlog_disable(void);
max_llstream_t* max_llstream_setup(max_engine_t* engine,const char* stream_name,size_t num_slots,size_t slot_size,void* buffer);
max_llstream_t* max_llstream_setup_array(max_engarray_t* array,int engine_index,const char* stream_name,size_t num_slots,size_t slot_size,void* buffer);
void max_llstream_release(max_llstream_t* llstream);
ssize_t max_llstream_read(max_llstream_t* llstream,size_t max_slots,void** slots);
void max_llstream_read_discard(max_llstream_t* llstream,size_t num_slots);
ssize_t max_llstream_write_acquire(max_llstream_t* llstream,size_t max_slots,void** slots);
void max_llstream_write(max_llstream_t* llstream,size_t num_slots);
void Simple(int32_t param_N,const float* instream_x,float* outstream_y);
max_run_t* Simple_nonblock(int32_t param_N,const float* instream_x,float* outstream_y);
typedef struct{int32_t param_N;const float* instream_x;float* outstream_y;}Simple_actions_t;
void Simple_run(max_engine_t* engine,Simple_actions_t* interface_actions);
max_run_t* Simple_run_nonblock(max_engine_t* engine,Simple_actions_t* interface_actions);
void Simple_run_group(max_group_t* group,Simple_actions_t* interface_actions);
max_run_t* Simple_run_group_nonblock(max_group_t* group,Simple_actions_t* interface_actions);
void Simple_run_array(max_engarray_t* engarray,Simple_actions_t* interface_actions[]);
max_run_t* Simple_run_array_nonblock(max_engarray_t* engarray,Simple_actions_t* interface_actions[]);
max_actions_t* Simple_convert(max_file_t* maxfile,Simple_actions_t* interface_actions);
max_file_t* Simple_init(void);
int Simple_has_errors(void);
const char* Simple_get_errors(void);
void Simple_clear_errors(void);
void Simple_free(void);
int Simple_simulator_start(void);
int Simple_simulator_stop(void);