#!/usr/bin/env python

'''
End to end testing.
'''

import os
import subprocess

import common

def cpp():
    '''
    Builds and executes C++ example.

    Environmental variables:
        CPP        -- Name of executable file generated by make
        PARAMETERS -- Parameters for executable
    '''
    executable = os.environ.get('CPP')

    parameters = os.environ.get('PARAMETERS', '').split(':')

    subprocess.call('make')
    subprocess.call(['./' + executable] + parameters)

def csharp():
    '''
    Builds and executes C# example.

    Environmental variables:
        MONO_PATH  -- Path to C# libraries
        MAXFILE    -- Name of .max file
        CSHARP     -- Name of C# code file
        PARAMETERS -- Parameters for executable
    '''
    maxfile = common.get_file_name(os.environ.get('MAXFILE'))
    path = os.environ.get('MONO_PATH')

    name = os.environ.get('CSHARP')
    executable = common.get_file_name(name)

    parameters = os.environ.get('PARAMETERS', '').split(':')

    subprocess.call(['mcs', '/out:'+ executable, name,
                     '/recurse:../gen-csharp/com/maxeler/' + maxfile + '/*.cs',
                     '/r:' + path + '/Thrift.dll'])
    subprocess.call(['mono', executable] + parameters)

def erlang():
    '''
    Builds and executes Erlang example.

    Environmental variables:
        EINCLUDEPATH -- Path to Erlang include files
        EBINPATH     -- Path to Erlang binaries files
        ERLANG       -- Name of Erlang code file
        PARAMETERS   -- Parameters for executable
    '''
    bin_path = os.environ.get('EBINPATH')
    include_path = os.environ.get('EINCLUDEPATH')

    name = os.environ.get('ERLANG')
    executable = common.get_file_name(name)

    parameters = os.environ.get('PARAMETERS', '').split(':')

    gen_erl = ['../gen-erl/' + gen for gen in os.listdir('../gen-erl/')
               if common.get_file_extension(gen) == '.erl']

    subprocess.call(['erlc', '-I', include_path, '-I', bin_path,
                     '-I', '../gen-erl/', '-o', '../gen-erl/'] +  gen_erl)
    subprocess.call(['erlc', '-I', include_path, '-I', '../gen-erl/', name])
    subprocess.call(['erl', '-pa', bin_path, '-pa', '../gen-erl/', '-noshell',
                     '-s', executable, 't'] + parameters +
                    ['-s', 'init', 'stop'])

def golang():
    '''
    Builds and executes Golang example.

    Environmental variables:
        GOLANG     -- Name of Golang code file
        PARAMETERS -- Parameters for executable
    '''
    name = os.environ.get('GOLANG')
    executable = common.get_file_name(name)

    parameters = os.environ.get('PARAMETERS', '').split(':')

    subprocess.call(['go', 'build', name])
    subprocess.call(['./' + executable] + parameters)

def haskell():
    '''
    Builds and executes Haskell example.

    Environmental variables:
        HASKELLPATH -- Path to Haskell libraries
        HASKELL     -- Name of Haskell code file
        PARAMETERS  -- Parameters for executable
    '''
    path = os.environ.get('HASKELLPATH')

    name = os.environ.get('HASKELL')
    executable = common.get_file_name(name)

    parameters = os.environ.get('PARAMETERS', '').split(':')

    subprocess.call(['ghc', '-i' + path, '-o', executable, name])
    subprocess.call(['./' + executable] + parameters)

def java():
    '''
    Builds and executes Java example.

    Environmental variables:
        PARAMETERS -- Parameters for executable
    '''
    parameters = ['-Darg' + str(index) + argument
                  for (index, argument)
                  in enumerate(os.environ.get('PARAMETERS', '').split(':'))]

    subprocess.call(['ant'] + parameters)

def perl():
    '''
    Builds and executes Pelr example.

    Environmental variables:
        PERL       -- Name of Perl code file
        PARAMETERS -- Parameters for executable
    '''
    name = os.environ.get('PERL')

    parameters = os.environ.get('PARAMETERS', '').split(':')

    subprocess.call(['perl', name] + parameters)

def php():
    '''
    Builds and executes PHP example.

    Environmental variables:
        PHP        -- Name of PHP code file
        PARAMETERS -- Parameters for executable
    '''
    name = os.environ.get('PHP')

    parameters = os.environ.get('PARAMETERS', '').split(':')

    subprocess.call(['php', './' + name] + parameters)

def python():
    '''
    Builds and executes Python example.

    Environmental variables:
        PYTHON     -- Name of Python code file
        PARAMETERS -- Parameters for executable
    '''
    name = os.environ.get('PYTHON')

    parameters = os.environ.get('PARAMETERS', '').split(':')

    subprocess.call(['./' + name] + parameters)

def ruby():
    '''
    Builds and executes Ruby example.

    Environmental variables:
        RUBY       -- Name of Ruby code file
        PARAMETERS -- Parameters for executable
    '''
    name = os.environ.get('RUBY')

    parameters = os.environ.get('PARAMETERS', '').split(':')

    subprocess.call(['./' + name] + parameters)

def start_server():
    '''
    Starts MaxSkins server in localhost at port = PORT in background.

    Environmental variables:
        SERVER -- Path to MaxSkins Server
        PORT   -- Server port

    Output:
        Server Process ID.
    '''
    server = os.environ.get('SERVER')
    port = os.environ.get('PORT')

    return subprocess.Popen([server, port]).pid

def stop_server(pid):
    '''
    Stops MaxSkins Server.

    Input:
        pid -- Server Process ID
    '''
    subprocess.call(['kill', str(pid)])

def restart_sim():
    '''
    Restarts Simulation.

    Environmental variables:
         CARD -- Name of card
    '''
    card = os.environ.get('CARD')

    subprocess.call(['maxcompilersim', '-c', card, 'restart'])

def maxskins(language):
    '''
    Generates MaxSkins for specified language.

    Input:
        language -- Language for MaxSkins

    Environmental variables:
         MAXFILE -- Name of .max file
    '''
    maxfile = os.environ.get('MAXFILE')

    directory = './examples/' + EXAMPLE
    with common.change_working_directory(directory):
        subprocess.call(['maxskins', '--' + language, maxfile])

def run(language, interface):
    '''
    Runs an example for specified interface and language.

    Supported languages: C++, C#, Erlang, Golang, Haskell,
                         Java, Perl, PHP, Python, Ruby

    Supported interfaces: Advanced Static, Basic Static, Dynamic

    Input:
        language  -- Example language
        interface -- Example interface
    '''
    languages = {'cpp': cpp,
                 'csharp': csharp,
                 'erl': erlang,
                 'go': golang,
                 'hs': haskell,
                 'java': java,
                 'perl': perl,
                 'php': php,
                 'py': python,
                 'rb': ruby}

    directory = ('./examples/' + EXAMPLE + '/client/' +
                 language + '/' + interface)
    with common.change_working_directory(directory):
        pid = start_server()
        languages[language]()
        stop_server(pid)

if __name__ == '__main__':
    EXAMPLE = os.environ.get('EXAMPLE')

    restart_sim()

    for LANGUAGE in os.listdir('./examples/' + EXAMPLE + '/client'):
        maxskins(LANGUAGE)
        DIRECTORY = './examples/' + EXAMPLE + '/client/' + LANGUAGE
        for INTERFACE in os.listdir(DIRECTORY):
            if INTERFACE in ['AdvancedStatic', 'BasicStatic', 'Dynamic']:
                run(LANGUAGE, INTERFACE)

