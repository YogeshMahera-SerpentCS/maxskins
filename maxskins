#!/usr/bin/env python

"""
Usage:
  maxskins [--cpp | --C++] [--py | --Python]  [--java | --Java]
           [--rb | --Ruby] [--hs | --Haskell] [--csharp | --C#]
           [--go | --Go]   [--erl | --Erlang] [--perl | --Perl]
           [--cocoa | --Cocoa] [--delphi | --Delphi] [--php | --PHP]
           <maxfile> [-d <output_directory>]
  maxskins -h | --help
  maxskins -v | --version

Options:
  --cocoa  --Cocoa          Cocoa wrapper
  --cpp    --C++            C++ wrapper
  --csharp --C#             C# wrapper
  --delphi --Delphi         Delphi wrapper
  --erl    --Erlang         Erlang wrapper
  --go     --Go             Go wrapper
  --hs     --Haskell        Haskell wrapper
  --java   --Java           Java wrapper
  --perl   --Perl           Perl wrapper
  --php    --PHP            PHP wrapper
  --py     --Python         Python wrapper
  --rb     --Ruby           Ruby wrapper

  -d <output_directory>     Output directory [default: .]
  -h --help                 Show this message
  -v --version              Show MaxSkins version
"""

import os
import subprocess
import sys

from docopt    import docopt
from fabricate import run

import common

def short_language_targets(arguments):
    """
    Makes a list of short language targets from docopt arguments.

    Input:
        Arguments dictionary containing:
            --cocoa -- true if --cocoa was called, false otherwise
            --Cocoa -- true if --Cocoa was called, false otherwise
            --cpp -- true if --cpp was called, false otherwise
            --C++ -- true if --C++ was called, false otherwise
            ...

    Output:
       List of targets.
    """
    language_targets = [('cocoa', 'Cocoa'), ('cpp', 'C++'), ('csharp', 'C#'),
                        ('delphi', 'Delphi'), ('erl', 'Erlang'), ('go', 'Go'),
                        ('hs', 'Haskell'), ('java', 'Java'), ('perl', 'Perl'),
                        ('py', 'Python'), ('rb', 'Ruby'), ('php', 'PHP')]


    return [short_language_target
            for (short_language_target, long_language_target)
            in language_targets
            if arguments['--%s' % (short_language_target)]
            or arguments['--%s' % (long_language_target)]]

def parse_input_arguments():
    """
    Parse input arguments using docopt,
    and validate parsed arguments.

    Output:
        Dictionary containing:
            maxfile -- path to maxfile
            maxfile_name -- name of maxfile
            targets -- list of targets
            dirs -- directories dictionary containing:
                output -- output directory
                client -- client directory
                server -- server directory
                scratch -- scratch directory
                slic -- slic directory
                lib -- maxcompiler lib directory
                sim_lib -- maxeleros-sim lib directory
    """
    maxcompiler_dir = os.environ.get('MAXCOMPILERDIR')

    docopt_arguments = docopt(__doc__, version=common.VERSION)

    maxfile = os.path.abspath(docopt_arguments['<maxfile>'])
    output_dir = os.path.abspath(docopt_arguments['-d'])

    if not maxcompiler_dir:
        print 'Environmental variable MAXCOMPILERDIR is not set!'
        sys.exit(-1)

    if not os.path.isfile(maxfile):
        print 'No such maxfile!'
        sys.exit(-1)

    if common.get_file_extension(maxfile) != '.max':
        print 'Maxfile must have .max extension!'
        sys.exit(-1)

    return {'maxfile': maxfile,
            'maxfile_name': common.get_file_name(maxfile),
            'targets': short_language_targets(docopt_arguments),
            'dirs': {'output': output_dir,
                     'client': os.path.join(output_dir, 'client'),
                     'server': os.path.join(output_dir, 'server'),
                     'scratch': os.path.join(output_dir, '.scratch'),
                     'slic': os.path.join(maxcompiler_dir, 'include/slic'),
                     'lib': os.path.join(maxcompiler_dir, 'lib'),
                     'sim_lib': os.path.join(maxcompiler_dir,
                                             'lib/maxeleros-sim/lib')}}

def create_project_directories(dirs, targets):
    """
    Creates project directories.

    Input:
        dirs -- directories dictionary containing:
            output -- output directory
            client -- client directory
            server -- server directory
            scratch -- scratch directory

        targets -- list of targets
    """
    for directory in dirs:
        subprocess.call(['mkdir', '-p', dirs[directory]])

    for target in targets:
        target_dir = os.path.join(dirs['client'], target)
        subprocess.call(['mkdir', '-p', target_dir])

def generate_thrift_wrappers(maxfile_name, dirs, targets):
    """
    Generate wrappers for cpp and target languages using thrift.

    Input:
        maxfile_name -- name of maxfile

        dirs -- directories dictionary containing:
            client -- client directory
            scratch -- scratch directory

        targets -- list of targets
    """
    with common.change_working_directory(dirs['scratch']):
        run('thrift', '--gen', 'cpp', maxfile_name + '.thrift')

        for target in targets:
            run('thrift', '--gen', target, maxfile_name + '.thrift')

            target_dir = os.path.join(dirs['client'], target)
            subprocess.call(['cp', '-rf', 'gen-' + target, target_dir])

def make_server_binary(maxfile_name, dirs):
    """
    Makes server executable and copies it to the server directory.

    Input:
        maxfile_name -- name of maxfile

        dirs -- directories dictionary containing:
            client -- client directory
            scratch -- scratch directory
    """
    cpp_flags = ['-finstrument-functions', '-fopenmp', '-fPIC',
                 '-I', dirs['slic'], '-I', 'gen-cpp']

    ld_flags = ['-fopenmp', '-lresolv', '-lnsl', '-lthrift',
                '-lslic', '-lmaxeleros', '-lpthread', '-lm', '-lrt',
                '-L', '/lib', '-L', '/lib64',
                '-L', dirs['lib'], '-L', dirs['sim_lib']]

    sources = ['gen-cpp/%sService' % (maxfile_name),
               'gen-cpp/%s_constants' % (maxfile_name),
               'gen-cpp/%s_types' % (maxfile_name),
               '%s_server' % (maxfile_name)]

    slic_obj = 'slic_%s.o' % (maxfile_name)

    with common.change_working_directory(dirs['scratch']):
        for source in sources:
            run('g++', cpp_flags, '-c', '-o', source + '.o', source + '.cpp')

        run('g++', cpp_flags, '-o', maxfile_name + '_server',
            [source + '.o' for source in sources], slic_obj, ld_flags)

        subprocess.call(['cp', '-f', maxfile_name + '_server', dirs['server']])

if __name__ == '__main__':
    ARGUMENTS = parse_input_arguments()

    create_project_directories(ARGUMENTS['dirs'], ARGUMENTS['targets'])

    with common.change_working_directory(ARGUMENTS['dirs']['scratch']):
        # Create object file.
        run('sliccompile', ARGUMENTS['maxfile'])

        # Create header file.
        run('sliccompile', '-t', 'cheader', ARGUMENTS['maxfile'])

        # Render Thrift IDL file and server C++ implementation.
        run('h2thrift', '-I', ARGUMENTS['dirs']['slic'],
            ARGUMENTS['maxfile_name'] + '.h')

    generate_thrift_wrappers(ARGUMENTS['maxfile_name'], ARGUMENTS['dirs'],
                             ARGUMENTS['targets'])

    make_server_binary(ARGUMENTS['maxfile_name'], ARGUMENTS['dirs'])
